// ===== Manga4U api.client.js (v3.1 ‚Äî –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é login —ñ —Ç–æ–∫–µ–Ω–∞) =====

// üåç –ë–∞–∑–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –±–µ–∫–µ–Ω–¥—É
window.API_BASE = window.API_BASE || 'https://manga4u-164617ec4bac.herokuapp.com';

// --------------------------------------------------
// üîê TokenStore ‚Äî —î–¥–∏–Ω–∏–π –º–µ—Ö–∞–Ω—ñ–∑–º –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è JWT
// --------------------------------------------------
const TokenStore = {
  localKey: 'm4u_token',
  sessionKey: 'm4u_token_session',

  get() {
    return (
      localStorage.getItem(this.localKey) ||
      sessionStorage.getItem(this.sessionKey) ||
      sessionStorage.getItem('m4u_token') || // fallback –¥–ª—è —Å—Ç–∞—Ä–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
      null
    );
  },

  set(token, remember = false) {
    if (remember) localStorage.setItem(this.localKey, token);
    else sessionStorage.setItem(this.sessionKey, token);
  },

  clear() {
    localStorage.removeItem(this.localKey);
    sessionStorage.removeItem(this.sessionKey);
  },
};

// --------------------------------------------------
// üåê apiFetch ‚Äî —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ API
// --------------------------------------------------
async function apiFetch(path, options = {}) {
  const token = localStorage.getItem('m4u_token') || sessionStorage.getItem('m4u_token');
  const headers = new Headers(options.headers || {});

  // –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON ‚Äî —Å—Ç–∞–≤–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
  if (options.body && !(options.body instanceof FormData)) {
    headers.set('Content-Type', 'application/json');
  }

  if (token) {
    headers.set('Authorization', `Bearer ${token}`);
  }

  const response = await fetch(`${API_BASE}${path}`, {
    ...options,
    headers,
  });

  const text = await response.text();
  let data;
  try {
    data = text ? JSON.parse(text) : null;
  } catch {
    data = text;
  }

  if (!response.ok) {
    const err = new Error(data?.message || data || response.statusText);
    err.status = response.status;
    throw err;
  }

  return data;
}

window.apiFetch = apiFetch;

// --------------------------------------------------
// üë§ Auth ‚Äî —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// --------------------------------------------------
window.Auth = {
  /**
   * –£–≤—ñ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç —ñ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ç–æ–∫–µ–Ω
   * @param {string} login
   * @param {string} password
   * @param {boolean} remember
   */
  async login(login, password, remember = false) {
    const res = await fetch(`${API_BASE}/api/Account/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ login, password }),
    });

    const text = await res.text();
    let data;
    try {
      data = text ? JSON.parse(text) : null;
    } catch {
      data = text;
    }

    if (!res.ok) {
      const msg = data?.message || data || '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó';
      throw new Error(msg);
    }

    const token = data?.token;
    if (!token) throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ç–æ–∫–µ–Ω');

    TokenStore.set(token, remember);
    console.log('‚úÖ Token saved:', token.slice(0, 30) + '...');
    return token;
  },

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {boolean} strict - —è–∫—â–æ true ‚Äî –∫–∏–Ω–µ –ø–æ–º–∏–ª–∫—É –ø—Ä–∏ 401
   * @returns {Promise<object|null>}
   */
  async me(strict = false) {
    const token = TokenStore.get();
    if (!token) {
      if (strict) throw new Error('No token');
      return null;
    }

    try {
      const me = await apiFetch('/api/Account/me', { method: 'GET' });
      return me;
    } catch (err) {
      if (err.status === 401) TokenStore.clear();
      if (strict) throw err;
      return null;
    }
  },

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {object} user - –æ–± º—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {string} role - –Ω–∞–∑–≤–∞ —Ä–æ–ª—ñ ("admin", "owner", "user")
   */
  hasRole(user, role) {
    const roles = (user?.roles || user?.role || []).map((r) =>
      String(r).toLowerCase()
    );
    return roles.includes(role.toLowerCase());
  },

  /**
   * –í–∏–π—Ç–∏ –∑ –∞–∫–∞—É–Ω—Ç—É
   */
  logout() {
    TokenStore.clear();
    location.href = './auth.html';
  },
};

// --------------------------------------------------
// üåé –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–æ
// --------------------------------------------------
window.apiFetch = apiFetch;
window.TokenStore = TokenStore;
